//
// PublicAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PublicAPI {

    /**
     * enum for parameter lang
     */
    public enum Lang_defaultRoot: String, CaseIterable {
        case eng = "eng"
        case ukr = "ukr"
        case rus = "rus"
    }

    /**
     get a fact about cats, a meow fact
     
     - parameter factID: (query) pass an optional id to call a specific fact (optional)
     - parameter count: (query) number of facts to return (optional)
     - parameter lang: (query) requested locale to retrieve the cat fact in. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func defaultRoot(factID: String? = nil, count: Int? = nil, lang: Lang_defaultRoot? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Fact]?, _ error: Error?) -> Void)) -> RequestTask {
        return defaultRootWithRequestBuilder(factID: factID, count: count, lang: lang).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     get a fact about cats, a meow fact
     - GET /
     - By passing in the appropriate options, you can recieve a specific or more than one fact. 
     - parameter factID: (query) pass an optional id to call a specific fact (optional)
     - parameter count: (query) number of facts to return (optional)
     - parameter lang: (query) requested locale to retrieve the cat fact in. (optional)
     - returns: RequestBuilder<[Fact]> 
     */
    open class func defaultRootWithRequestBuilder(factID: String? = nil, count: Int? = nil, lang: Lang_defaultRoot? = nil) -> RequestBuilder<[Fact]> {
        let localVariablePath = "/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "factID": (wrappedValue: factID?.encodeToJSON(), isExplode: true),
            "count": (wrappedValue: count?.encodeToJSON(), isExplode: true),
            "lang": (wrappedValue: lang?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Fact]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     health check endpoint
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func healthcheck(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Healthcheck?, _ error: Error?) -> Void)) -> RequestTask {
        return healthcheckWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     health check endpoint
     - GET /health
     - The health check endpoint will return a status of 200 if the api is up and ready to recieve connections. It will tell the uptime, and total requests served since last restart. It also has a field for version which corresponds to the versioned release from the github repo.   
     - returns: RequestBuilder<Healthcheck> 
     */
    open class func healthcheckWithRequestBuilder() -> RequestBuilder<Healthcheck> {
        let localVariablePath = "/health"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Healthcheck>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     options discovery endpoint
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func options(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: OptionEndpoint?, _ error: Error?) -> Void)) -> RequestTask {
        return optionsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     options discovery endpoint
     - GET /options
     - This endpoint will list all languages available to the root endpoint.    
     - returns: RequestBuilder<OptionEndpoint> 
     */
    open class func optionsWithRequestBuilder() -> RequestBuilder<OptionEndpoint> {
        let localVariablePath = "/options"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OptionEndpoint>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
